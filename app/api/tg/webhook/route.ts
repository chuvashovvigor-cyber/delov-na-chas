// app/api/tg/webhook/route.ts
export const dynamic = 'force-dynamic';

import { redis, GEO_KEY, META_KEY, MASTER_TTL_SEC } from '../../../../lib/redis';

const TOKEN = process.env.TELEGRAM_BOT_TOKEN!;
const ADMIN_CHAT_ID = process.env.TELEGRAM_ADMIN_CHAT_ID!;
const API = `https://api.telegram.org/bot${TOKEN}`;

async function send(chatId: number | string, text: string, extra?: any) {
  await fetch(`${API}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ chat_id: chatId, text, parse_mode: 'HTML', ...extra }),
  });
}

export async function POST(req: Request) {
  const update = await req.json();

  try {
    const msg = update.message ?? update.edited_message; // live-location –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ edited_message
    const text: string | undefined = msg?.text;
    const chatId = msg?.chat?.id;
    const user = msg?.from;

    // 1) GEO-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const loc = msg?.location;
    if (loc && chatId) {
      const lon = Number(loc.longitude);
      const lat = Number(loc.latitude);
      const id = String(chatId);

      // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–∫—É –≤ GEO
      await (redis as any).geoadd(GEO_KEY, { longitude: lon, latitude: lat, member: id });

      // –º–µ—Ç–∞ + TTL (–∏–º—è, updatedAt)
      const meta = {
        name: [user?.first_name, user?.last_name].filter(Boolean).join(' ') || `–ú–∞—Å—Ç–µ—Ä ${id}`,
        updatedAt: Date.now(),
      };
      await redis.set(META_KEY(id), JSON.stringify(meta), { ex: MASTER_TTL_SEC });

      // —É–≤–µ–¥–æ–º–∏–º –∞–¥–º–∏–Ω–∞ ‚Äú–≤—Ç–∏—Ö—É—é‚Äù
      if (ADMIN_CHAT_ID) {
        await send(ADMIN_CHAT_ID, `üìç <b>${meta.name}</b>\nlat: ${lat}\nlon: ${lon}`);
      }

      return Response.json({ ok: true });
    }

    // 2) –ö–æ–º–∞–Ω–¥—ã
    if (text === '/chatid' && chatId) {
      await send(chatId, `chat_id —ç—Ç–æ–π –±–µ—Å–µ–¥—ã: <code>${chatId}</code>`);
      return Response.json({ ok: true });
    }

    if (text === '/start' && chatId) {
      await send(
        chatId,
        [
          `–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ¬´–î–µ–ª–æ–≤-–Ω–∞-—á–∞—Å¬ª.`,
          ``,
          `–ö–æ–º–∞–Ω–¥—ã:`,
          `/status ‚Äî –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å`,
          `/location ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é`,
          `/chatid ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å id —á–∞—Ç–∞`,
          ``,
          `–î–ª—è ¬´–∂–∏–≤–æ–≥–æ¬ª —Ç—Ä–µ–∫–∏–Ω–≥–∞ –≤–∫–ª—é—á–∏ –≤ Telegram ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏¬ª:`,
          `–ö—Ä–µ–ø—ë–∂ ‚Üí –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ ‚Üí –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.`,
        ].join('\n'),
      );
      return Response.json({ ok: true });
    }

    if (text === '/status' && chatId) {
      await fetch(`${API}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üöó –í –ø—É—Ç–∏', callback_data: 'status:enroute' }],
              [{ text: 'üìç –ù–∞ –º–µ—Å—Ç–µ', callback_data: 'status:onsite' }],
              [{ text: 'üîß –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', callback_data: 'status:in_progress' }],
              [{ text: '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ', callback_data: 'status:done' }],
            ],
          },
        }),
      });
      return Response.json({ ok: true });
    }

    if (text === '/location' && chatId) {
      await fetch(`${API}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é.',
          reply_markup: {
            keyboard: [[{ text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é', request_location: true }]],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        }),
      });
      return Response.json({ ok: true });
    }

    // inline-–∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
    if (update.callback_query?.data?.startsWith('status:')) {
      const status = update.callback_query.data.split(':')[1];
      const who = update.callback_query.from?.first_name || '–º–∞—Å—Ç–µ—Ä';

      await send(ADMIN_CHAT_ID, `üü¢ ${who}: —Å—Ç–∞—Ç—É—Å ‚Üí <b>${status}</b>`);
      await fetch(`${API}/answerCallbackQuery`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ callback_query_id: update.callback_query.id, text: '–û–∫' }),
      });
      return Response.json({ ok: true });
    }

    // –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω—É
    if (text && chatId) {
      await send(ADMIN_CHAT_ID, `üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${chatId}:\n${text}`);
    }

    return Response.json({ ok: true });
  } catch {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã TG –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª
    return new Response('ok', { status: 200 });
  }
}

export async function GET()  { return new Response('ok', { status: 200 }); }
export async function HEAD() { return new Response(null, { status: 200 }); }
