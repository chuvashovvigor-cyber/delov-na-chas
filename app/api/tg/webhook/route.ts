// app/api/tg/webhook/route.ts
export const dynamic = 'force-dynamic';

import { redis, GEO_KEY, META_KEY, MASTER_TTL_SEC } from '@/lib/redis';

const TOKEN = process.env.TELEGRAM_BOT_TOKEN!;
const ADMIN_CHAT_ID = process.env.TELEGRAM_ADMIN_CHAT_ID!; // –Ω–∞–ø—Ä–∏–º–µ—Ä: -1003112208284
const API = `https://api.telegram.org/bot${TOKEN}`;

async function send(chatId: number | string, text: string, extra?: any) {
  await fetch(`${API}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ chat_id: chatId, text, parse_mode: 'HTML', ...extra }),
  });
}

// –µ–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä–∞
async function saveMasterLocation(opts: {
  id: number | string;
  lat: number;
  lon: number;
  name?: string;
}) {
  const id = String(opts.id);

  // 1) –≤ –≥–µ–æ–∏–Ω–¥–µ–∫—Å
  await redis.geoadd(GEO_KEY, {
    longitude: opts.lon,
    latitude: opts.lat,
    member: id,
  });

  // 2) –º–µ—Ç–∞ —Å TTL (–∫—Ä–æ–º–µ –∏–º–µ–Ω–∏ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏ —Ç.–ø.)
  await redis.set(
    META_KEY(id),
    JSON.stringify({
      id,
      name: opts.name || '–ú–∞—Å—Ç–µ—Ä',
      updatedAt: Date.now(),
    }),
    { ex: MASTER_TTL_SEC },
  );
}

export async function POST(req: Request) {
  const update = await req.json();

  try {
    const text: string | undefined = update.message?.text;
    const chatId = update.message?.chat?.id;
    const whoName: string | undefined =
      update.message?.from?.first_name ?? update.callback_query?.from?.first_name;

    // ===== /chatid
    if (text === '/chatid') {
      await send(chatId, `chat_id —ç—Ç–æ–π –±–µ—Å–µ–¥—ã: <code>${chatId}</code>`);
      return Response.json({ ok: true });
    }

    // ===== –ª–æ–∫–∞—Ü–∏—è (–æ–±—ã—á–Ω–∞—è)
    if (update.message?.location) {
      const { latitude, longitude, live_period } = update.message.location;

      await saveMasterLocation({
        id: chatId,
        lat: latitude,
        lon: longitude,
        name: whoName,
      });

      await send(
        ADMIN_CHAT_ID,
        `üìç –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è –æ—Ç ${whoName ?? chatId}:\nlat: ${latitude}\nlon: ${longitude}${
          live_period ? `\n(live ${live_period}s)` : ''
        }`,
      );

      // –º–∞—Å—Ç–µ—Ä—É –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
      await send(chatId, `–û–∫, –ø–æ–∑–∏—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ`);
      return Response.json({ ok: true });
    }

    // ===== ¬´–∂–∏–≤–∞—è¬ª –ª–æ–∫–∞—Ü–∏—è: Telegram –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∫–∞–∫ edited_message.location
    if (update.edited_message?.location) {
      const { latitude, longitude } = update.edited_message.location;
      const liveChatId = update.edited_message.chat?.id;

      await saveMasterLocation({
        id: liveChatId,
        lat: latitude,
        lon: longitude,
        name: update.edited_message?.from?.first_name,
      });

      // –∞–¥–º–∏–Ω–∞–º –º–æ–∂–Ω–æ –Ω–µ —Å–ø–∞–º–∏—Ç—å, –Ω–æ –æ—Å—Ç–∞–≤–ª—é ¬´—Ç–∏—Ö–∏–π¬ª –ª–æ–≥
      // await send(ADMIN_CHAT_ID, `‚ôªÔ∏è Live location –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –æ—Ç ${liveChatId}`);

      return Response.json({ ok: true });
    }

    // ===== —Å—Ç–∞—Ä—Ç
    if (text === '/start') {
      await send(
        chatId,
        [
          `–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ¬´–î–µ–ª–æ–≤-–Ω–∞-—á–∞—Å¬ª.`,
          ``,
          `–ö–æ–º–∞–Ω–¥—ã:`,
          `/status ‚Äî –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∞—Ç—É—Å`,
          `/location ‚Äî —Ä–∞–∑–æ–≤–∞—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è`,
          `/onshift ‚Äî –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É (–≤–∫–ª—é—á–∏—Ç—å Live Location)`,
          `/offshift ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É (—É–±—Ä–∞—Ç—å –º–µ—Ç–∫—É —Å –∫–∞—Ä—Ç—ã)`,
          `/chatid ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å id —á–∞—Ç–∞`,
        ].join('\n'),
      );
      return Response.json({ ok: true });
    }

    // ===== —Å—Ç–∞—Ç—É—Å—ã ‚Äî inline keyboard
    if (text === '/status') {
      await fetch(`${API}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üöó –í –ø—É—Ç–∏', callback_data: 'status:enroute' }],
              [{ text: 'üìç –ù–∞ –º–µ—Å—Ç–µ', callback_data: 'status:onsite' }],
              [{ text: 'üîß –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', callback_data: 'status:in_progress' }],
              [{ text: '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ', callback_data: 'status:done' }],
            ],
          },
        }),
      });
      return Response.json({ ok: true });
    }

    // ===== –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è
    if (text === '/location') {
      await fetch(`${API}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é.',
          reply_markup: {
            keyboard: [[{ text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é', request_location: true }]],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        }),
      });
      return Response.json({ ok: true });
    }

    // ===== –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É (–ø–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–∞ Live Location)
    if (text === '/onshift') {
      await send(
        chatId,
        [
          'üëá –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å ¬´–∂–∏–≤—É—é¬ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:',
          '1) –ù–∞–∂–º–∏—Ç–µ —Å–∫—Ä–µ–ø–∫—É / ¬´+¬ª',
          '2) –í—ã–±–µ—Ä–∏—Ç–µ ¬´–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è¬ª',
          '3) –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏¬ª –∏ —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8 —á–∞—Å–æ–≤)',
          '',
          '–ü–æ–∫–∞ –¥–µ–ª–∏—Ç–µ—Å—å Live Location ‚Äî –≤–∞—à–∞ –º–µ—Ç–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç–µ.',
        ].join('\n'),
      );
      return Response.json({ ok: true });
    }

    // ===== –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É (—É–¥–∞–ª—è–µ–º –º–µ—Ç—É/–º–µ—Ç–∫—É)
    if (text === '/offshift') {
      if (chatId) {
        await redis.del(META_KEY(String(chatId)));
        // –ì–µ–æ–∏–Ω–¥–µ–∫—Å —Å–∞–º ¬´–ø–æ—á–∏—Å—Ç–∏—Ç—Å—è¬ª –Ω–∞ —á—Ç–µ–Ω–∏–∏ ‚Äî –Ω–æ –º–æ–∂–Ω–æ —è–≤–Ω–æ —É–¥–∞–ª–∏—Ç—å:
        // –≤ Redis –¥–ª—è GEO –Ω–µ—Ç "remove by member" –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º ZREM (–≥–µ–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ zset)
        await redis.zrem(GEO_KEY, String(chatId));
      }
      await send(chatId, '–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–µ—Ç–∫–∞ —Å–∫—Ä—ã—Ç–∞ —Å –∫–∞—Ä—Ç—ã ‚úÖ');
      await send(ADMIN_CHAT_ID, `üî¥ ${whoName ?? chatId} –∑–∞–≤–µ—Ä—à–∏–ª(–∞) —Å–º–µ–Ω—É`);
      return Response.json({ ok: true });
    }

    // ===== –∫–ª–∏–∫ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    if (update.callback_query?.data?.startsWith('status:')) {
      const status = update.callback_query.data.split(':')[1];
      const who = update.callback_query.from?.first_name || '–º–∞—Å—Ç–µ—Ä';

      await send(ADMIN_CHAT_ID, `üü¢ ${who}: —Å—Ç–∞—Ç—É—Å ‚Üí <b>${status}</b>`);
      await fetch(`${API}/answerCallbackQuery`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          callback_query_id: update.callback_query.id,
          text: '–û–±–Ω–æ–≤–ª–µ–Ω–æ',
        }),
      });
      return Response.json({ ok: true });
    }

    // ===== –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç—ã ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É
    if (text && chatId) {
      await send(ADMIN_CHAT_ID, `üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${chatId}:\n${text}`);
    }

    return Response.json({ ok: true });
  } catch {
    // Telegram –≤—Å–µ–≥–¥–∞ –∂–¥—ë—Ç 200 ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
    return new Response('error', { status: 200 });
  }
}

// –ù—É–∂–Ω—ã –¥–ª—è setWebhook
export async function GET()  { return new Response('ok', { status: 200 }); }
export async function HEAD() { return new Response(null, { status: 200 }); }
