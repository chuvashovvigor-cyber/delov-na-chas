// app/api/tg/webhook/route.ts
export const dynamic = 'force-dynamic';

import { redis, GEO_KEY, META_KEY, MASTER_TTL_SEC } from '../../../../lib/redis';

const TOKEN = process.env.TELEGRAM_BOT_TOKEN!;
const ADMIN_CHAT_ID = process.env.TELEGRAM_ADMIN_CHAT_ID!;
const API = `https://api.telegram.org/bot${TOKEN}`;

async function send(chatId: number | string, text: string, extra?: any) {
  await fetch(`${API}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ chat_id: chatId, text, parse_mode: 'HTML', ...extra }),
  });
}

async function saveMasterLocation(opts: { id: number | string; lat: number; lon: number; name?: string }) {
  const id = String(opts.id);

  // GEO-–∏–Ω–¥–µ–∫—Å
  await redis.geoadd(GEO_KEY, { longitude: opts.lon, latitude: opts.lat, member: id });

  // –º–µ—Ç–∞ + TTL (–∏—Å—á–µ–∑–∞–µ—Ç, –µ—Å–ª–∏ –º–∞—Å—Ç–µ—Ä –ø–µ—Ä–µ—Å—Ç–∞–ª —Å–ª–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
  await redis.set(
    META_KEY(id),
    JSON.stringify({ id, name: opts.name || '–ú–∞—Å—Ç–µ—Ä', updatedAt: Date.now() }),
    { ex: MASTER_TTL_SEC }
  );
}

export async function POST(req: Request) {
  const update = await req.json();

  try {
    const text: string | undefined = update.message?.text;
    const chatId = update.message?.chat?.id;
    const whoName: string | undefined =
      update.message?.from?.first_name ?? update.callback_query?.from?.first_name;

    if (text === '/chatid') {
      await send(chatId, `chat_id —ç—Ç–æ–π –±–µ—Å–µ–¥—ã: <code>${chatId}</code>`);
      return Response.json({ ok: true });
    }

    // –†–∞–∑–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è
    if (update.message?.location) {
      const { latitude, longitude, live_period } = update.message.location;

      await saveMasterLocation({ id: chatId, lat: latitude, lon: longitude, name: whoName });
      await send(
        ADMIN_CHAT_ID,
        `üìç –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è –æ—Ç ${whoName ?? chatId}:\nlat: ${latitude}\nlon: ${longitude}${
          live_period ? `\n(live ${live_period}s)` : ''
        }`
      );
      await send(chatId, `–û–∫, –ø–æ–∑–∏—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ`);
      return Response.json({ ok: true });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è Live Location –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ edited_message.location
    if (update.edited_message?.location) {
      const { latitude, longitude } = update.edited_message.location;
      const liveChatId = update.edited_message.chat?.id;

      await saveMasterLocation({
        id: liveChatId,
        lat: latitude,
        lon: longitude,
        name: update.edited_message?.from?.first_name,
      });
      return Response.json({ ok: true });
    }

    if (text === '/start') {
      await send(
        chatId,
        [
          `–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ¬´–î–µ–ª–æ–≤-–Ω–∞-—á–∞—Å¬ª.`,
          ``,
          `–ö–æ–º–∞–Ω–¥—ã:`,
          `/status ‚Äî –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∞—Ç—É—Å`,
          `/location ‚Äî —Ä–∞–∑–æ–≤–∞—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è`,
          `/onshift ‚Äî –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É (–≤–∫–ª—é—á–∏—Ç—å Live Location)`,
          `/offshift ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É (—É–±—Ä–∞—Ç—å –º–µ—Ç–∫—É —Å –∫–∞—Ä—Ç—ã)`,
          `/chatid ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å id —á–∞—Ç–∞`,
        ].join('\n')
      );
      return Response.json({ ok: true });
    }

    if (text === '/status') {
      await fetch(`${API}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üöó –í –ø—É—Ç–∏', callback_data: 'status:enroute' }],
              [{ text: 'üìç –ù–∞ –º–µ—Å—Ç–µ', callback_data: 'status:onsite' }],
              [{ text: 'üîß –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', callback_data: 'status:in_progress' }],
              [{ text: '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ', callback_data: 'status:done' }],
            ],
          },
        }),
      });
      return Response.json({ ok: true });
    }

    if (text === '/location') {
      await fetch(`${API}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é.',
          reply_markup: {
            keyboard: [[{ text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é', request_location: true }]],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        }),
      });
      return Response.json({ ok: true });
    }

    if (text === '/onshift') {
      await send(
        chatId,
        [
          'üëá –ö–∞–∫ –≤–∫–ª—é—á–∏—Ç—å ¬´–∂–∏–≤—É—é¬ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:',
          '1) –ù–∞–∂–º–∏—Ç–µ —Å–∫—Ä–µ–ø–∫—É / ¬´+¬ª',
          '2) –í—ã–±–µ—Ä–∏—Ç–µ ¬´–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è¬ª',
          '3) ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏¬ª –∏ —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8 —á)',
          '',
          '–ü–æ–∫–∞ Live Location –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –º–µ—Ç–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.',
        ].join('\n')
      );
      return Response.json({ ok: true });
    }

    if (text === '/offshift') {
      if (chatId) {
        await redis.del(META_KEY(String(chatId)));
        await redis.zrem(GEO_KEY, String(chatId)); // —É–±—Ä–∞—Ç—å –∏–∑ GEO
      }
      await send(chatId, '–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–µ—Ç–∫–∞ —Å–∫—Ä—ã—Ç–∞ —Å –∫–∞—Ä—Ç—ã ‚úÖ');
      await send(ADMIN_CHAT_ID, `üî¥ ${whoName ?? chatId} –∑–∞–≤–µ—Ä—à–∏–ª(–∞) —Å–º–µ–Ω—É`);
      return Response.json({ ok: true });
    }

    if (update.callback_query?.data?.startsWith('status:')) {
      const status = update.callback_query.data.split(':')[1];
      const who = update.callback_query.from?.first_name || '–º–∞—Å—Ç–µ—Ä';

      await send(ADMIN_CHAT_ID, `üü¢ ${who}: —Å—Ç–∞—Ç—É—Å ‚Üí <b>${status}</b>`);
      await fetch(`${API}/answerCallbackQuery`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ callback_query_id: update.callback_query.id, text: '–û–±–Ω–æ–≤–ª–µ–Ω–æ' }),
      });
      return Response.json({ ok: true });
    }

    if (text && chatId) {
      await send(ADMIN_CHAT_ID, `üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${chatId}:\n${text}`);
    }

    return Response.json({ ok: true });
  } catch {
    return new Response('error', { status: 200 });
  }
}

// –¥–ª—è setWebhook
export async function GET()  { return new Response('ok', { status: 200 }); }
export async function HEAD() { return new Response(null, { status: 200 }); }
